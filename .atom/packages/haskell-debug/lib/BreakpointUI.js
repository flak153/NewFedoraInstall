"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this._breakpoints = [];
        this.markers = new WeakMap();
    }
    get breakpoints() {
        return this._breakpoints;
    }
    toggleBreakpoint(lineNumber, te) {
        const breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber,
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath(),
            }, te);
        }
        else {
            breakpoints.forEach((breakpoint) => {
                const m = this.markers.get(breakpoint);
                if (m) {
                    m.destroy();
                }
            });
        }
    }
    attachToNewTextEditor(te) {
        const lineNumbersModal = te.gutterWithName('line-number');
        if (!lineNumbersModal)
            throw new Error('No line-number gutter on editor');
        const view = atom.views.getView(lineNumbersModal);
        view.addEventListener('click', (ev) => {
            const scopes = te.getRootScopeDescriptor().getScopesArray();
            if (scopes.length === 1 && scopes[0] === 'source.haskell'
                && atom.config.get('haskell-debug.clickGutterToToggleBreakpoint')) {
                const bufferRow = ev.target.dataset.bufferRow;
                if (bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                const lineNumber = parseInt(bufferRow, 10) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
    setBreakpoint(breakpoint, te) {
        const breakpointMarker = te.markBufferRange([[breakpoint.line - 1, 0], [breakpoint.line, 0]], { invalidate: 'inside' });
        te.decorateMarker(breakpointMarker, {
            type: 'line-number',
            class: 'haskell-debug-breakpoint',
        });
        breakpointMarker.onDidChange((change) => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath(),
        }).forEach((breakpoint) => this.setBreakpoint(breakpoint, te));
    }
}
exports.BreakpointUI = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xpYi9CcmVha3BvaW50VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw0QkFBNEI7QUFHNUI7SUFBQTtRQUNVLGlCQUFZLEdBQWlCLEVBQUUsQ0FBQTtRQUMvQixZQUFPLEdBQStDLElBQUksT0FBTyxFQUFFLENBQUE7SUErRTdFLENBQUM7SUE3RUMsSUFBVyxXQUFXO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFBO0lBQzFCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxVQUFrQixFQUFFLEVBQXNCO1FBQ2hFLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUM3QyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNsQixJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FDaEI7Z0JBQ0UsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO2FBQ25CLEVBQ0QsRUFBRSxDQUNILENBQUE7UUFDSCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7Z0JBQ2pDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO2dCQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztJQUNILENBQUM7SUFFTSxxQkFBcUIsQ0FBQyxFQUFzQjtRQUVqRCxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDekQsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztZQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQTtRQUN6RSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBZ0IsQ0FBQTtRQUVoRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7WUFDcEMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDM0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLGdCQUFnQjttQkFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BFLE1BQU0sU0FBUyxHQUFJLEVBQUUsQ0FBQyxNQUFzQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUE7Z0JBQzlELEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUM1QixPQUFPLENBQUMsSUFBSSxDQUFDLG1FQUFtRSxDQUFDLENBQUE7b0JBQ2pGLE1BQU0sQ0FBQTtnQkFDUixDQUFDO2dCQUVELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUM5QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQ3ZDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBRU8sYUFBYSxDQUFDLFVBQXNCLEVBQUUsRUFBc0I7UUFDbEUsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUN6QyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2hELEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFFM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRTtZQUNsQyxJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsMEJBQTBCO1NBQ2xDLENBQUMsQ0FBQTtRQUVGLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3RDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQTtZQUNsRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUE7WUFDeEMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUE7UUFFOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVPLGtCQUFrQixDQUFDLEVBQXNCO1FBQy9DLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN6QixJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtTQUNuQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2hFLENBQUM7Q0FDRjtBQWpGRCxvQ0FpRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXRvbUFQSSA9IHJlcXVpcmUoJ2F0b20nKVxuaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuaW1wb3J0IHsgQnJlYWtwb2ludCB9IGZyb20gJy4vR0hDSURlYnVnJ1xuXG5leHBvcnQgY2xhc3MgQnJlYWtwb2ludFVJIHtcbiAgcHJpdmF0ZSBfYnJlYWtwb2ludHM6IEJyZWFrcG9pbnRbXSA9IFtdXG4gIHByaXZhdGUgbWFya2VyczogV2Vha01hcDxCcmVha3BvaW50LCBhdG9tQVBJLkRpc3BsYXlNYXJrZXI+ID0gbmV3IFdlYWtNYXAoKVxuXG4gIHB1YmxpYyBnZXQgYnJlYWtwb2ludHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JyZWFrcG9pbnRzXG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlQnJlYWtwb2ludChsaW5lTnVtYmVyOiBudW1iZXIsIHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICBjb25zdCBicmVha3BvaW50cyA9IF8ucmVtb3ZlKHRoaXMuYnJlYWtwb2ludHMsIHtcbiAgICAgIGZpbGU6IHRlLmdldFBhdGgoKSxcbiAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgfSlcblxuICAgIGlmIChicmVha3BvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuc2V0QnJlYWtwb2ludChcbiAgICAgICAge1xuICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpLFxuICAgICAgICB9LFxuICAgICAgICB0ZSxcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWtwb2ludHMuZm9yRWFjaCgoYnJlYWtwb2ludCkgPT4ge1xuICAgICAgICBjb25zdCBtID0gdGhpcy5tYXJrZXJzLmdldChicmVha3BvaW50KVxuICAgICAgICBpZiAobSkgeyBtLmRlc3Ryb3koKSB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhdHRhY2hUb05ld1RleHRFZGl0b3IodGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIC8vIHBhdGNoIHRoZSB0ZXh0IGVkaXRvciB0byBhZGQgYnJlYWtwb2ludHMgb24gY2xpY2tcbiAgICBjb25zdCBsaW5lTnVtYmVyc01vZGFsID0gdGUuZ3V0dGVyV2l0aE5hbWUoJ2xpbmUtbnVtYmVyJylcbiAgICBpZiAoIWxpbmVOdW1iZXJzTW9kYWwpIHRocm93IG5ldyBFcnJvcignTm8gbGluZS1udW1iZXIgZ3V0dGVyIG9uIGVkaXRvcicpXG4gICAgY29uc3QgdmlldyA9IGF0b20udmlld3MuZ2V0VmlldyhsaW5lTnVtYmVyc01vZGFsKSBhcyBIVE1MRWxlbWVudFxuXG4gICAgdmlldy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xuICAgICAgY29uc3Qgc2NvcGVzID0gdGUuZ2V0Um9vdFNjb3BlRGVzY3JpcHRvcigpLmdldFNjb3Blc0FycmF5KClcbiAgICAgIGlmIChzY29wZXMubGVuZ3RoID09PSAxICYmIHNjb3Blc1swXSA9PT0gJ3NvdXJjZS5oYXNrZWxsJ1xuICAgICAgICAmJiBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcuY2xpY2tHdXR0ZXJUb1RvZ2dsZUJyZWFrcG9pbnQnKSkge1xuICAgICAgICBjb25zdCBidWZmZXJSb3cgPSAoZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5kYXRhc2V0LmJ1ZmZlclJvd1xuICAgICAgICBpZiAoYnVmZmVyUm93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJoYXNrZWxsLWRlYnVnOiBjbGljayBvbiBndXR0ZXIgZG9lc24ndCBoYXZlIGEgYnVmZmVyIHJvdyBwcm9wZXJ0eVwiKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGluZU51bWJlciA9IHBhcnNlSW50KGJ1ZmZlclJvdywgMTApICsgMVxuICAgICAgICB0aGlzLnRvZ2dsZUJyZWFrcG9pbnQobGluZU51bWJlciwgdGUpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuc2V0RmlsZUJyZWFrcG9pbnRzKHRlKVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRCcmVha3BvaW50KGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQsIHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICBjb25zdCBicmVha3BvaW50TWFya2VyID0gdGUubWFya0J1ZmZlclJhbmdlKFxuICAgICAgW1ticmVha3BvaW50LmxpbmUgLSAxLCAwXSwgW2JyZWFrcG9pbnQubGluZSwgMF1dLFxuICAgICAgeyBpbnZhbGlkYXRlOiAnaW5zaWRlJyB9KVxuXG4gICAgdGUuZGVjb3JhdGVNYXJrZXIoYnJlYWtwb2ludE1hcmtlciwge1xuICAgICAgdHlwZTogJ2xpbmUtbnVtYmVyJyxcbiAgICAgIGNsYXNzOiAnaGFza2VsbC1kZWJ1Zy1icmVha3BvaW50JyxcbiAgICB9KVxuXG4gICAgYnJlYWtwb2ludE1hcmtlci5vbkRpZENoYW5nZSgoY2hhbmdlKSA9PiB7XG4gICAgICBicmVha3BvaW50LmxpbmUgPSBjaGFuZ2UubmV3SGVhZEJ1ZmZlclBvc2l0aW9uLnJvd1xuICAgICAgaWYgKCFjaGFuZ2UuaXNWYWxpZCkge1xuICAgICAgICBfLnJlbW92ZSh0aGlzLmJyZWFrcG9pbnRzLCBicmVha3BvaW50KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLm1hcmtlcnMuc2V0KGJyZWFrcG9pbnQsIGJyZWFrcG9pbnRNYXJrZXIpXG5cbiAgICB0aGlzLmJyZWFrcG9pbnRzLnB1c2goYnJlYWtwb2ludClcbiAgfVxuXG4gIHByaXZhdGUgc2V0RmlsZUJyZWFrcG9pbnRzKHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICBfLmZpbHRlcih0aGlzLmJyZWFrcG9pbnRzLCB7XG4gICAgICBmaWxlOiB0ZS5nZXRQYXRoKCksXG4gICAgfSkuZm9yRWFjaCgoYnJlYWtwb2ludCkgPT4gdGhpcy5zZXRCcmVha3BvaW50KGJyZWFrcG9pbnQsIHRlKSlcbiAgfVxufVxuIl19