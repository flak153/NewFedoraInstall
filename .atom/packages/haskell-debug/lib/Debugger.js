"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atomAPI = require("atom");
const GHCIDebug_1 = require("./GHCIDebug");
const DebugView_1 = require("./views/DebugView");
const CurrentVariablesView_1 = require("./views/CurrentVariablesView");
const HistoryState_1 = require("./HistoryState");
const LineHighlighter_1 = require("./LineHighlighter");
const TerminalReporter_1 = require("./TerminalReporter");
class Debugger {
    constructor(breakpoints, editor, ideCabalBuilderCommand) {
        this.editor = editor;
        this.ideCabalBuilderCommand = ideCabalBuilderCommand;
        this.lineHighlighter = new LineHighlighter_1.LineHighlighter();
        this.ghciDebug = new GHCIDebug_1.GHCIDebug(this.getGhciCommand(), this.getGhciArgs(), this.editor.getPath());
        this.debugView = new DebugView_1.DebugView();
        this.historyState = new HistoryState_1.HistoryState();
        this.currentVariablesView = new CurrentVariablesView_1.CurrentVariablesView();
        this.terminalReporter = new TerminalReporter_1.TerminalReporter();
        this.disposables = new atomAPI.CompositeDisposable();
        this.debuggerEnabled = false;
        this.executingCommandFromConsole = false;
        this.launchGHCIDebugAndConsole(breakpoints);
        this.displayGUI();
        this.disposables.add(atom.config.onDidChange('haskell-debug.breakOnException', ({ newValue }) => {
            this.ghciDebug.setExceptionBreakLevel(newValue);
        }));
    }
    async resolveExpression(expression) {
        return this.ghciDebug.resolveExpression(expression);
    }
    back() {
        if (this.historyState.setCurrentPosition(this.historyState.getCurrentPosition() + 1)) {
            this.ghciDebug.back();
        }
    }
    forward() {
        if (this.historyState.setCurrentPosition(this.historyState.getCurrentPosition() - 1)) {
            this.ghciDebug.forward();
        }
    }
    continue() {
        this.ghciDebug.continue();
    }
    step() {
        this.ghciDebug.step();
    }
    stop() {
        this.ghciDebug.stop();
    }
    hidePanels() {
        this.debugPanel.hide();
        this.currentVariablesPanel.hide();
    }
    showPanels() {
        this.debugPanel.show();
        this.currentVariablesPanel.show();
    }
    getGhciCommand() {
        if (atom.config.get('haskell-debug.useIdeHaskellCabalBuilder')) {
            switch (this.ideCabalBuilderCommand) {
                case 'cabal':
                    return 'cabal';
                case 'stack':
                    return 'stack';
                default:
                    return atom.config.get('haskell-debug.GHCICommand');
            }
        }
        return atom.config.get('haskell-debug.GHCICommand');
    }
    getGhciArgs() {
        const args = [];
        const ghciArgs = atom.config.get('haskell-debug.GHCIArguments');
        if (atom.config.get('haskell-debug.useIdeHaskellCabalBuilder')) {
            switch (this.ideCabalBuilderCommand) {
                case 'cabal':
                    args.push('repl');
                    break;
                case 'stack':
                    args.push('ghci');
                    break;
            }
        }
        if (ghciArgs.length > 0
            && (this.ideCabalBuilderCommand === 'cabal'
                || this.ideCabalBuilderCommand === 'stack')) {
            return args.concat(`--ghc-options="${atom.config.get('haskell-debug.GHCIArguments')}"`);
        }
        else {
            return args.concat(atom.config.get('haskell-debug.GHCIArguments').split(' '));
        }
    }
    destroy() {
        this.lineHighlighter.destroy();
        this.ghciDebug.destroy();
        this.debugView.destroy();
        this.debugPanel.destroy();
        this.currentVariablesPanel.destroy();
        this.currentVariablesView.destroy();
        this.terminalReporter.destroy();
        this.disposables.dispose();
    }
    displayGUI() {
        this.debugPanel = atom.workspace.addTopPanel({
            item: this.debugView.element,
        });
        this.debugView.on('step', () => this.step());
        this.debugView.on('back', () => this.back());
        this.debugView.on('forward', () => this.forward());
        this.debugView.on('continue', () => this.continue());
        this.debugView.on('stop', () => this.stop());
        this.currentVariablesPanel = atom.workspace.addTopPanel({
            item: this.currentVariablesView.element,
        });
    }
    updateHistoryLengthAndEnableButtons(historyLength) {
        if (historyLength !== undefined) {
            this.historyState.setMaxPosition(historyLength);
        }
        this.debugView.enableAllDebugButtons();
        this.debugView.setButtonEnabled('back', this.historyState.backEnabled);
        this.debugView.setButtonEnabled('forward', this.historyState.forwardEnabled);
        this.debuggerEnabled = true;
    }
    async launchGHCIDebugAndConsole(breakpoints) {
        this.ghciDebug.on('line-changed', (info) => {
            this.lineHighlighter.hightlightLine(info);
            this.updateHistoryLengthAndEnableButtons(info.historyLength);
            this.currentVariablesView.update(info.localBindings, false);
        });
        this.ghciDebug.on('paused-on-exception', (info) => {
            this.lineHighlighter.destroy();
            this.updateHistoryLengthAndEnableButtons(info.historyLength);
            this.currentVariablesView.update(info.localBindings, true);
        });
        this.ghciDebug.on('debug-finished', () => {
            this.destroy();
        });
        this.ghciDebug.on('command-issued', (command) => {
            if (!this.executingCommandFromConsole) {
                this.terminalReporter.displayCommand(command);
            }
            this.debuggerEnabled = false;
            setTimeout(() => {
                if (!this.debuggerEnabled) {
                    this.debugView.disableAllDebugButtons();
                }
            }, 100);
        });
        this.ghciDebug.on('console-output', (output) => {
            this.terminalReporter.write(output);
        });
        this.ghciDebug.on('error-completed', (errorText) => {
            if (!this.executingCommandFromConsole) {
                atom.notifications.addError('GHCI Error', {
                    detail: errorText,
                    dismissable: true,
                });
            }
        });
        this.ghciDebug.on('error', (errorText) => {
            this.terminalReporter.write(errorText);
        });
        await this.ghciDebug.addedAllListeners();
        this.terminalReporter.on('command', async (command) => {
            this.executingCommandFromConsole = true;
            await this.ghciDebug.run(command, true, true);
            this.executingCommandFromConsole = false;
        });
        this.terminalReporter.on('close', () => {
            this.ghciDebug.stop();
        });
        this.ghciDebug.setExceptionBreakLevel(atom.config.get('haskell-debug.breakOnException'));
        this.debugView.disableAllDebugButtons();
        const fileToDebug = this.editor.getPath();
        if (!fileToDebug)
            throw new Error('Trying to debug on a text editor with no filename');
        this.ghciDebug.loadModule(fileToDebug);
        breakpoints.forEach((ob) => {
            if (ob.file === fileToDebug) {
                this.ghciDebug.addBreakpoint(ob.line.toString());
            }
            else {
                this.ghciDebug.addBreakpoint(ob);
            }
        });
        this.ghciDebug.startDebug(atom.config.get('haskell-debug.functionToDebug'));
    }
}
exports.Debugger = Debugger;
//# sourceMappingURL=data:application/json;base64,